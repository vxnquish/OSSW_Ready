#name: Main Branch CI/CD Pipeline
#
#on:
#  push:
#    branches: [main]
#  pull_request:
#    branches: [main]
#
#env:
#  JAR_NAME: 'backend'
#  JAVA_VERSION: '17'
#
#jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Create application configuration files
#        run: |
#          mkdir -p ./src/main/resources
#          if [ -n "${{ secrets.APPLICATION_PROPERTIES }}" ]; then
#            echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
#            echo "✅ application.properties created"
#          fi
#          ls -la ./src/main/resources/application.* || echo "No config files"
#        working-directory: backend
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#        working-directory: backend
#
#      - name: Build without running tests
#        run: ./gradlew bootJar -x test
#        working-directory: backend
#
#      - name: Upload test results
#        uses: actions/upload-artifact@v4
#        if: failure()
#        with:
#          name: test-results
#          path: backend/build/reports/tests/
#
#  build:
#    needs: test
#    runs-on: ubuntu-latest
#    outputs:
#      jar-version: ${{ steps.build-info.outputs.jar-version }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Create application configuration files
#        run: |
#          mkdir -p ./src/main/resources
#          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties
#        working-directory: backend
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#        working-directory: backend
#
#      - name: Build with Gradle
#        run: ./gradlew clean build -x test --no-daemon
#        working-directory: backend
#
#      - name: Get build info
#        id: build-info
#        run: |
#          JAR_FILE=$(find build/libs -name "${JAR_NAME}-*.jar" ! -name '*plain.jar' | head -n 1)
#          if [ -z "$JAR_FILE" ]; then
#            echo "❌ JAR not found"
#            ls -la build/libs/
#            exit 1
#          fi
#          JAR_VERSION=$(basename "$JAR_FILE" | sed "s/${JAR_NAME}-//g" | sed 's/.jar//g')
#          echo "jar-version=$JAR_VERSION" >> $GITHUB_OUTPUT
#          echo "📦 Built JAR: $(basename $JAR_FILE)"
#        working-directory: backend
#
#      - name: Upload build artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.JAR_NAME }}
#          path: backend/build/libs/${{ env.JAR_NAME }}-*.jar
#          retention-days: 7
#
#  deploy:
#    needs: [test, build]
#    runs-on: ubuntu-latest
#    environment: production
#    steps:
#      - name: Download build artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.JAR_NAME }}
#          path: build/libs/
#
#      - name: Prepare deployment
#        id: prepare
#        run: |
#          JAR_FILE=$(find build/libs -name "${JAR_NAME}-*.jar" | head -n 1)
#          if [ -z "$JAR_FILE" ]; then
#            echo "❌ JAR not found"
#            exit 1
#          fi
#          echo "jar-file=$JAR_FILE" >> $GITHUB_OUTPUT
#          echo "🚀 Ready to deploy: $(basename $JAR_FILE)"
#
#      - name: Deploy to EC2 Server
#        env:
#          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
#          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#        run: |
#          echo "$EC2_SSH_KEY" > private_key.pem
#          chmod 600 private_key.pem
#
#          JAR_FILE="${{ steps.prepare.outputs.jar-file }}"
#          TARGET_JAR_NAME="${{ env.JAR_NAME }}.jar"
#
#          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST <<EOF
#            echo "🔁 Stopping existing app..."
#            pkill -TERM -f "$TARGET_JAR_NAME" || true
#            sleep 5
#
#            echo "📦 Backing up old JAR..."
#            if [ -f /home/$EC2_USERNAME/$TARGET_JAR_NAME ]; then
#              cp /home/$EC2_USERNAME/$TARGET_JAR_NAME /home/$EC2_USERNAME/${TARGET_JAR_NAME}.backup
#              echo "✅ Backup complete"
name: Main Branch CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  JAR_NAME: 'backend'
  JAVA_VERSION: '17'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Build without tests
        run: |
          cd backend
          mkdir -p src/main/resources
          [ -n "${{ secrets.APPLICATION_PROPERTIES }}" ] && \
            echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties
          chmod +x gradlew
          ./gradlew bootJar -x test
      - if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: backend/build/reports/tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.build.outputs.jar-path }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Build JAR
        id: build
        run: |
          cd backend
          chmod +x gradlew
          ./gradlew clean bootJar -x test --no-daemon
          JAR_FILE=$(find build/libs -name "${JAR_NAME}-*.jar" \
                     ! -name '*plain.jar' | head -n1)
          echo "jar-path=$JAR_FILE" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/build/libs/${{ env.JAR_NAME }}-*.jar
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: build/libs/

      - name: Decode & convert SSH key
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          printf "%s\n" "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh-keygen -p -m PEM -f private_key.pem -P "" -N "" >/dev/null
          chmod 600 private_key.pem

      - name: Perform deployment
        shell: bash {0}
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          JAR_PATH: ${{ needs.build.outputs.jar-path }}
        run: |
          set +e

          echo "▶ Stop & backup"
          ssh -i private_key.pem -o StrictHostKeyChecking=no \
            ubuntu@${EC2_HOST} \
            "pkill -TERM -f backend.jar || true; \
             sleep 5; cd /home/ubuntu; \
             ([ -f backend.jar ] && cp backend.jar backend.jar.backup) || true" \
            || true

          echo "▶ Upload new JAR"
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            "$JAR_PATH" ubuntu@${EC2_HOST}:/home/ubuntu/backend.jar \
            || true

          echo "▶ Launch app"
          ssh -i private_key.pem -o StrictHostKeyChecking=no \
            ubuntu@${EC2_HOST} \
            "cd /home/ubuntu; \
             nohup java -jar -Dspring.profiles.active=prod backend.jar > app.log 2>&1 &>/dev/null & exit 0" \
            || true

          echo "▶ Launch step completed"

      - name: Cleanup
        run: rm -f private_key.pem
